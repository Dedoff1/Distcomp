// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Publisher.Repositories;

#nullable disable

namespace Publisher.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240503122058_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Publisher.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("tweetId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("tweetId");

                    b.ToTable("tbl_comment", t =>
                        {
                            t.HasCheckConstraint("len(content) < 2", "LENGTH(\"content\") > 2");
                        });
                });

            modelBuilder.Entity("Publisher.Models.Sticker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tbl_sticker", t =>
                        {
                            t.HasCheckConstraint("len(name) < 2", "LENGTH(\"name\") > 2");
                        });
                });

            modelBuilder.Entity("Publisher.Models.Tweet", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("title")
                        .IsUnique();

                    b.HasIndex("userId");

                    b.ToTable("tbl_tweet", t =>
                        {
                            t.HasCheckConstraint("len(content) < 4", "LENGTH(\"content\") > 4");

                            t.HasCheckConstraint("len(title) < 2", "LENGTH(\"title\") > 2");
                        });
                });

            modelBuilder.Entity("Publisher.Models.TweetSticker", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("stickerId")
                        .HasColumnType("integer");

                    b.Property<int>("tweetId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("stickerId");

                    b.HasIndex("tweetId");

                    b.ToTable("tbl_tweetSticker", (string)null);
                });

            modelBuilder.Entity("Publisher.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("login")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("id");

                    b.HasIndex("login")
                        .IsUnique();

                    b.ToTable("tbl_user", t =>
                        {
                            t.HasCheckConstraint("len(firstname) < 2", "LENGTH(\"firstname\") > 2");

                            t.HasCheckConstraint("len(lastname) < 2", "LENGTH(\"lastname\") > 2");

                            t.HasCheckConstraint("len(login) < 2", "LENGTH(\"login\") > 2");

                            t.HasCheckConstraint("len(password) < 8", "LENGTH(\"password\") > 8");
                        });
                });

            modelBuilder.Entity("Publisher.Models.Comment", b =>
                {
                    b.HasOne("Publisher.Models.Tweet", "Tweet")
                        .WithMany("Comments")
                        .HasForeignKey("tweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("Publisher.Models.Tweet", b =>
                {
                    b.HasOne("Publisher.Models.User", "User")
                        .WithMany("Tweets")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Publisher.Models.TweetSticker", b =>
                {
                    b.HasOne("Publisher.Models.Sticker", "Sticker")
                        .WithMany("TweetStickers")
                        .HasForeignKey("stickerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Publisher.Models.Tweet", "Tweet")
                        .WithMany("TweetStickers")
                        .HasForeignKey("tweetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sticker");

                    b.Navigation("Tweet");
                });

            modelBuilder.Entity("Publisher.Models.Sticker", b =>
                {
                    b.Navigation("TweetStickers");
                });

            modelBuilder.Entity("Publisher.Models.Tweet", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("TweetStickers");
                });

            modelBuilder.Entity("Publisher.Models.User", b =>
                {
                    b.Navigation("Tweets");
                });
#pragma warning restore 612, 618
        }
    }
}
